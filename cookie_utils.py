import os
import json
import tempfile
from typing import Dict, List, Any
import time

def convert_playwright_to_netscape(playwright_cookie_file: str) -> str:
    """
    Convert a Playwright format cookie file to Netscape format.
    
    Netscape cookie file format:
    - domain  FLAG  path  SECURE  EXPIRES  NAME  VALUE
    - Fields are TAB separated
    - FLAG is TRUE for domains starting with dot, FALSE otherwise
    - SECURE is TRUE/FALSE for HTTPS only
    - EXPIRES is Unix timestamp in seconds, or 0 for session cookies
    
    Args:
        playwright_cookie_file: Path to the Playwright format cookie file
        
    Returns:
        Path to the converted Netscape format cookie file
    """
    # Create a temporary file for the Netscape format cookies
    netscape_cookie_file = tempfile.NamedTemporaryFile(delete=False, suffix='.txt')
    netscape_cookie_file.close()
    
    try:
        # Read the Playwright format cookie file
        with open(playwright_cookie_file, 'r', encoding='utf-8') as f:
            cookie_data = json.load(f)
        
        # Extract cookies from the Playwright format
        cookies = []
        if 'cookies' in cookie_data:
            cookies = cookie_data['cookies']
        
        # Write cookies in Netscape format
        with open(netscape_cookie_file.name, 'w', encoding='utf-8') as f:
            # Write Netscape cookie file header
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file is generated by youtube-dl.  Do not edit.\n\n")
            
            # Keep track of seen cookies to avoid duplicates
            seen_cookies = set()
            
            # Process YouTube cookies first, then Google cookies
            for domain_suffix in ['.youtube.com', '.google.com', 'accounts.google.com']:
                domain_cookies = [c for c in cookies if c.get('domain', '').endswith(domain_suffix)]
                
                for cookie in domain_cookies:
                    # Extract cookie fields
                    domain = cookie.get('domain', '')
                    if not domain:
                        continue
                    
                    # Format domain and determine FLAG
                    if domain.startswith('.'):
                        flag = 'TRUE'
                    else:
                        flag = 'FALSE'
                    
                    path = cookie.get('path', '/')
                    secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
                    
                    # Handle expiry
                    expires = cookie.get('expires', -1)
                    if isinstance(expires, float):
                        expires = int(expires)
                    if expires <= 0:
                        expires = '0'
                    
                    name = cookie.get('name', '')
                    value = cookie.get('value', '')
                    
                    # Skip empty or invalid cookies
                    if not name or not value:
                        continue
                    
                    # Skip duplicate cookies
                    cookie_key = (domain, path, name)
                    if cookie_key in seen_cookies:
                        continue
                    seen_cookies.add(cookie_key)
                    
                    # Skip temporary session tokens
                    if name.startswith('ST-'):
                        continue
                    
                    # Clean cookie value
                    value = value.replace('\t', '%09').replace('\n', '%0A').replace('\r', '%0D')
                    
                    # Format: domain FLAG path SECURE EXPIRES NAME VALUE
                    cookie_line = f"{domain}\t{flag}\t{path}\t{secure}\t{expires}\t{name}\t{value}\n"
                    f.write(cookie_line)
        
        return netscape_cookie_file.name
    
    except Exception as e:
        # Clean up the temporary file if there's an error
        if os.path.exists(netscape_cookie_file.name):
            os.unlink(netscape_cookie_file.name)
        raise e

def get_cookie_file(cookie_file: str) -> str:
    """
    Get a cookie file in the format expected by youtube-dl.
    If the file is in Playwright format, convert it to Netscape format.
    
    Args:
        cookie_file: Path to the cookie file
        
    Returns:
        Path to a cookie file in Netscape format
    """
    if not cookie_file or not os.path.exists(cookie_file):
        return ""
    
    # Check if the file is in Playwright format (JSON)
    try:
        with open(cookie_file, 'r', encoding='utf-8') as f:
            first_char = f.read(1)
            f.seek(0)
            
            if first_char == '{':
                # Likely a JSON file (Playwright format)
                return convert_playwright_to_netscape(cookie_file)
            else:
                # Check if it's already a valid Netscape format file
                first_line = f.readline().strip()
                if first_line == "# Netscape HTTP Cookie File":
                    return cookie_file
                else:
                    # Try to convert anyway
                    return convert_playwright_to_netscape(cookie_file)
    except Exception as e:
        print(f"Error processing cookie file: {str(e)}")
        return ""

if __name__ == "__main__":
    # Test the cookie conversion
    def test_cookie_conversion():
        # Test file paths
        json_cookie_file = "www.youtube.com.json"
        netscape_cookie_file = "youtube_cookie.txt"
        
        # Convert JSON cookie file to Netscape format
        if os.path.exists(json_cookie_file):
            print(f"Converting {json_cookie_file} to Netscape format...")
            converted_file = get_cookie_file(json_cookie_file)
            
            if converted_file:
                print(f"Successfully converted to: {converted_file}")
                
                # Compare with existing Netscape format file
                if os.path.exists(netscape_cookie_file):
                    print("\nComparing with existing Netscape format file...")
                    with open(netscape_cookie_file, 'r', encoding='utf-8') as f:
                        existing_content = f.read()
                    with open(converted_file, 'r', encoding='utf-8') as f:
                        converted_content = f.read()
                        
                    if existing_content.strip() == converted_content.strip():
                        print("✓ Conversion matches existing format!")
                    else:
                        print("✗ Conversion format differs from existing file")
                        
                    # Print first few lines of both files for comparison
                    print("\nFirst few lines of existing file:")
                    print("\n".join(existing_content.split("\n")[:5]))
                    print("\nFirst few lines of converted file:")
                    print("\n".join(converted_content.split("\n")[:5]))
            else:
                print("Failed to convert cookie file")
        else:
            print(f"Cookie file {json_cookie_file} not found")
    
    # Run the test
    test_cookie_conversion() 